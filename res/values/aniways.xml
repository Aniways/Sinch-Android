<?xml version="1.0" encoding="utf-8"?>
<resources>

    <!--
        !!Mandatory config value!!
        Replace placeholder ID with your Aniways App Id
    -->
    <string name="aniways_appId">Sinch demo</string>

    <!--
       !!Mandatory config value!!
	   Sets the short text that will be added to the end of messages and would be visible only to users who 
	   do not have the latest version of you app installed.
	   This message will call upon the user to upgrade to the latest version of the app in order to see 
	   the icons inside the message. (the users will still receive the Message, but no phrase will
	   be replaced with an icon. The original text would appear instead).
    -->
    <string name="aniways_upgradeMessage">This message contains emoticons which you can see after upgrading to the latest version from: </string>

    <!--
       !!Mandatory config value!!
	   Your App's upgrade URL. Needs to be a url which will redirect to the relevant app store according to device
	   from which it is accessed.
	   This will be used by users to upgrade to the latest version of your app and be able to see the Aniways Icons inside messages.
	   The ‘http://’ (or https”//) part is essential – please do not use short hands.
    -->
    <string name="aniways_upgradeUrl">https://play.google.com/store/apps/details?id=com.zumbl.android</string>

    <!--
       The verbosity of the logs generated by Aniways.
	   Could be one of the following: Verbose, Info, Warning, Error, Off.
	   Default value is 'Verbose'.
    -->
    <string name="aniways_logsVerbosity">Verbose</string>
    
    <string name="aniways_iconEncodingMethod">Invisible</string>

    <!-- The height (in dips) of Aniways icons in the AniwaysEditText control. Default value is 60. -->
    <integer name="aniways_iconInEditTextSize">60</integer>

    <!-- The height (in dips) of Aniways icons in the AniwaysTextView control. Default value is 60. -->
    <integer name="aniways_iconInTextViewSize">60</integer>

    <!-- The size (in dips) of Aniways icons in the icon suggestion popup. Default value is 80. -->
    <integer name="aniways_iconInSuggestionPopupSize">80</integer>
    
    <!-- Whether to use smaller icons in the 'icons on demand' popup and have 3 rows and 6 columns 
    	 instead of the default 2 rows and 4 columns.
	 	 Default value is 'false'.  -->
    <bool name="aniways_useSmallerIconsInIconsOnDemendPopup">false</bool>

    <!--
       The number of times that the user sees highlighted text (suggested to be replaced with an icon) without clicking on it until the 
	   tutorial is shown again (providing that the number of times the tutorial has appeared so far was not more than getTimesShowTutorial() ).
	   Basically, this property sets the number of times that the user ignores the highlighted text before Aniways infers that the user
	   has not learned to click on it and shows the tutorial again.
	   Default value is 7.
    -->
    <integer name="aniways_numberOfWordsRequiredToShowTutorialAgain">7</integer>

    <!--
       The maximum times Aniways will show the tutorial. It may show it less times if it
	   sees that the user has learned how to click on the highlighted text.
	   The amount of time to wait for the user to learn before showing the tutorial again is
	   determined by the aniways_numberOfWordsRequiredToShowTutorialAgain property.
	   Default value is 3.
    -->
    <integer name="aniways_maxTimesToShowTutorial">3</integer>

    <!--
       Whether to disable or enable the tutorial for the AniwaysEditText control (teaches the user
	   to click on highlighted words).
	   Use the aniways_maxTimesToShowTutorial and aniways_numberOfWordsRequiredToShowTutorialAgain properties to
	   determine when to show the tutorial when it is enabled.
	   Default value is 'true'.
    -->
    <bool name="aniways_useEditTextTutorial">true</bool>

    <!--
       Whether to disable or enable the Tutorial for the AniwaysTextView control (teaches the user to click on icons).
	   Use the aniways_setTimesShowTutorial and the aniways_setNumberOfWordsRequiredToShowTutorialAgain properties to
	   determine when to show the tutorial when it is enabled.
	   Default value is 'true'.
    -->
    <bool name="aniways_useTextViewTutorial">false</bool>

    <!-- The color to use for highlighting parts of the text that can be replaced with an icon. Defalut value is 0xFF00FF00 (Green). -->
    <integer name="aniways_wordHighlightColor">0xFF00FF00</integer>
    
    <!-- Aniways caches its icons on the device. Set this property to 'true' if you would like it to use external storage when available instead
    	 of internal storage. This might reduce performance somewhat, and also mean that if the external storage is unavailable the user will
    	 not see the icons, but it might prove useful if you target users with very low end devices on which internal storage space is very limited.
    	 Default value is 'false'.
    -->
    <bool name="aniways_try_using_external_storage_for_icon_caching">true</bool>
    
    <!-- Whether to enable the Emoticons store. If this is set to 'true' then some of the icons will be locked and the user could unlock
    	 them using credits bought on the store. Each icon costs 10 credits. You (the app) decide how much to charge for credits.
    	 There are 6 credit SKUs (product IDs) that you need to define in Google play as !consumable! in-app purchase items: 100, 250, 500, 1000, 2000, 3000 credits.
    	 You decide how much they cost.
    	 For info on how to define the SKUs (product IDs) on Google play, please read: http://developer.android.com/google/play/billing/billing_admin.html 
    	 Please note: When this is set to 'true' then you must also set the SKUs (product IDs) for the credit packages, or this will not work.
    	 Default value is 'true'.
    -->
    <bool name="aniways_enable_credits_store">true</bool>
    
    <!-- Should be YOUR APPLICATION'S PUBLIC KEY
	 	 (that you got from the Google Play developer console - its in the Services & APIs tab, under 'YOUR LICENSE KEY FOR THIS APPLICATION').
	 	 This is not your developer public key, it's the *app-specific* public key.
		 
		 Instead of just storing the entire literal string here embedded in the
	 	 program,  you can construct the key at runtime from pieces or
	 	 use bit manipulation (for example, XOR with some other string) to hide
	 	 the actual key.  The key itself is not secret information, but if you don't
	 	 want to make it easy for an attacker to replace the public key with one
	 	 of their own and then fake messages from the server then you can remove this config
	 	 from the XML and instead set it in code in the onCreate() method, just after initializing Aniways.
		 
		 Default value is: '!!MUST REPLACE THIS with your app's public key'
    -->
    <string name="aniways_app_public_key_for_credits_store">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5JLYBl94qquxlO0Ugdan4DF2fSQgF4slZEjMPbzVAqzuGCL0z4scyaXKN2x99vrpDrV+wOVgX50s7vsD3Qym7RRInagCazT0pR4eYZur1gDsCt6nrOO1VktOBvTlme+YHzYkMDp7cFXKjjrb46bEP3EVqdoWFAOASsO5oa/frXkZ7EPeXkPG7pwJM6HPF1BZl3+75J2VrM1VrfUpNLQsc/4qjBGzTSq9I2rdyypndKUy6cjIU+9PH7BAgXwUbCBcKRLylhSuHHvmTqeJiY3J4KOsYgOzbmu8rDknltn/q+qq+h4bRKGfboFqjjCA1sUntuwfXjviUAeJnKc8RGCdgwIDAQAB</string>
    
    <!-- The amount of initial store credits to give to the user.
    	 After these credits are spent, the user will need to buy new ones in order to unlock locked icons.
    	 We recommend to use the default value of 100 in order to get the user accustomed to unlocking icons with the credits
    	 and increase the chances that he/she will buy more credits when the initial amount is spent.
    	 You need to set this only if the store is enabled.
    	 When the store is enabled, some of the icons will be locked and the user could unlock
    	 them using credits bought on the store. Each icon costs 10 credits. You (the app) decide how much to charge for credits.
    	 There are 6 credit SKUs (product IDs) that you need to define in Google play as in-app purchase items: 100, 250, 500, 1000, 2000, 3000 credits.
    	 You decide how much they cost.
    	 For info on how to define the SKUs (product ids) on Google play, please read: http://developer.android.com/google/play/billing/billing_admin.html
    	 Default value is '100'. 
    -->
    <integer name="aniways_store_initial_credits">100</integer>
    
    <!-- The SKU (product ID) for 100 credits in the emoticons store.
    	 You need to set this only if the store is enabled.
    	 When the store is enabled, some of the icons will be locked and the user could unlock
    	 them using credits bought on the store. Each icon costs 10 credits. You (the app) decide how much to charge for credits.
    	 There are 6 credit SKUs (product IDs) that you need to define in Google play as in-app purchase items: 100, 250, 500, 1000, 2000, 3000 credits.
    	 You decide how much they cost.
    	 For info on how to define the SKUs (product ids) on Google play, please read: http://developer.android.com/google/play/billing/billing_admin.html
    	 Default value is 'aniways_100_credits'. 
    -->
    <string name="aniways_100_credits_sku">aniways_100_credits</string>
    
    <!-- The SKU (product ID) for 250 credits in the emoticons store.
    	 You need to set this only if the store is enabled.
    	 When the store is enabled, some of the icons will be locked and the user could unlock
    	 them using credits bought on the store. Each icon costs 10 credits. You (the app) decide how much to charge for credits.
    	 There are 6 credit SKUs (product IDs) that you need to define in Google play as in-app purchase items: 100, 250, 500, 1000, 2000, 3000 credits.
    	 You decide how much they cost.
    	 For info on how to define the SKUs (product ids) on Google play, please read: http://developer.android.com/google/play/billing/billing_admin.html
    	 Default value is 'aniways_250_credits'. 
    -->
    <string name="aniways_250_credits_sku">aniways_250_credits</string>
    
    <!-- The SKU (product ID) for 500 credits in the emoticons store.
    	 You need to set this only if the store is enabled.
    	 When the store is enabled, some of the icons will be locked and the user could unlock
    	 them using credits bought on the store. Each icon costs 10 credits. You (the app) decide how much to charge for credits.
    	 There are 6 credit SKUs (product IDs) that you need to define in Google play as in-app purchase items: 100, 250, 500, 1000, 2000, 3000 credits.
    	 You decide how much they cost.
    	 For info on how to define the SKUs (product ids) on Google play, please read: http://developer.android.com/google/play/billing/billing_admin.html
    	 Default value is 'aniways_500_credits'. 
    -->
    <string name="aniways_500_credits_sku">aniways_500_credits</string>
    
    <!-- The SKU (product ID) for 1000 credits in the emoticons store.
    	 You need to set this only if the store is enabled.
    	 When the store is enabled, some of the icons will be locked and the user could unlock
    	 them using credits bought on the store. Each icon costs 10 credits. You (the app) decide how much to charge for credits.
    	 There are 6 credit SKUs (product IDs) that you need to define in Google play as in-app purchase items: 100, 250, 500, 1000, 2000, 3000 credits.
    	 You decide how much they cost.
    	 For info on how to define the SKUs (product ids) on Google play, please read: http://developer.android.com/google/play/billing/billing_admin.html
    	 Default value is 'aniways_1000_credits'. 
    -->
    <string name="aniways_1000_credits_sku">aniways_1000_credits</string>
    
    <!-- The SKU (product ID) for 2000 credits in the emoticons store.
    	 You need to set this only if the store is enabled.
    	 When the store is enabled, some of the icons will be locked and the user could unlock
    	 them using credits bought on the store. Each icon costs 10 credits. You (the app) decide how much to charge for credits.
    	 There are 6 credit SKUs (product IDs) that you need to define in Google play as in-app purchase items: 100, 250, 500, 1000, 2000, 3000 credits.
    	 You decide how much they cost.
    	 For info on how to define the SKUs (product ids) on Google play, please read: http://developer.android.com/google/play/billing/billing_admin.html
    	 Default value is 'aniways_2000_credits'. 
    -->
    <string name="aniways_2000_credits_sku">aniways_2000_credits</string>
    
    <!-- The SKU (product ID) for 3000 credits in the emoticons store.
    	 You need to set this only if the store is enabled.
    	 When the store is enabled, some of the icons will be locked and the user could unlock
    	 them using credits bought on the store. Each icon costs 10 credits. You (the app) decide how much to charge for credits.
    	 There are 6 credit SKUs (product IDs) that you need to define in Google play as in-app purchase items: 100, 250, 500, 1000, 2000, 3000 credits.
    	 You decide how much they cost.
    	 For info on how to define the SKUs (product ids) on Google play, please read: http://developer.android.com/google/play/billing/billing_admin.html
    	 Default value is 'aniways_3000_credits'. 
    -->
    <string name="aniways_3000_credits_sku">aniways_3000_credits</string>

</resources>